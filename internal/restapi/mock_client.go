// Code generated by mockery v2.9.4. DO NOT EDIT.

package restapi

import (
	job "github.com/antgubarev/pet/internal/job"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// GetJobByName provides a mock function with given fields: name
func (_m *MockClient) GetJobByName(name string) (*job.Job, error) {
	ret := _m.Called(name)

	var r0 *job.Job
	if rf, ok := ret.Get(0).(func(string) *job.Job); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobCreate provides a mock function with given fields: in
func (_m *MockClient) JobCreate(in *CreateJobIn) error {
	ret := _m.Called(in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*CreateJobIn) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobDelete provides a mock function with given fields: name
func (_m *MockClient) JobDelete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobFinish provides a mock function with given fields: id
func (_m *MockClient) JobFinish(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobStart provides a mock function with given fields: in
func (_m *MockClient) JobStart(in *JobStartIn) (uuid.UUID, error) {
	ret := _m.Called(in)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*JobStartIn) uuid.UUID); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*JobStartIn) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobsList provides a mock function with given fields:
func (_m *MockClient) JobsList() ([]job.Job, error) {
	ret := _m.Called()

	var r0 []job.Job
	if rf, ok := ret.Get(0).(func() []job.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]job.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
