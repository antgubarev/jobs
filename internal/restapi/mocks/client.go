// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	job "github.com/antgubarev/jobs/internal/job"
	mock "github.com/stretchr/testify/mock"

	restapi "github.com/antgubarev/jobs/internal/restapi"

	uuid "github.com/google/uuid"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetJobByName provides a mock function with given fields: ctx, name
func (_m *Client) GetJobByName(ctx context.Context, name string) (*job.Job, error) {
	ret := _m.Called(ctx, name)

	var r0 *job.Job
	if rf, ok := ret.Get(0).(func(context.Context, string) *job.Job); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobCreate provides a mock function with given fields: ctx, in
func (_m *Client) JobCreate(ctx context.Context, in *restapi.CreateJobIn) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *restapi.CreateJobIn) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobDelete provides a mock function with given fields: ctx, name
func (_m *Client) JobDelete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobFinish provides a mock function with given fields: ctx, id
func (_m *Client) JobFinish(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JobStart provides a mock function with given fields: ctx, in
func (_m *Client) JobStart(ctx context.Context, in *restapi.JobStartIn) (uuid.UUID, error) {
	ret := _m.Called(ctx, in)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(context.Context, *restapi.JobStartIn) uuid.UUID); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *restapi.JobStartIn) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobsList provides a mock function with given fields: ctx
func (_m *Client) JobsList(ctx context.Context) ([]job.Job, error) {
	ret := _m.Called(ctx)

	var r0 []job.Job
	if rf, ok := ret.Get(0).(func(context.Context) []job.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]job.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
